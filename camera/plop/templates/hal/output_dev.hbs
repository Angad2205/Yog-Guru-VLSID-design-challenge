/*
 * Copyright 2022 NXP.
 * This software is owned or controlled by NXP and may only be used strictly in accordance with the
 * license terms that accompany it. By expressly accepting such terms or by downloading, installing,
 * activating and/or otherwise using the software, you are agreeing that you have read, and that you
 * agree to comply with and are bound by, such license terms. If you do not agree to be bound by the
 * applicable license terms, then you may not retain, install, activate or otherwise use the software.
 */

/*
 * @brief {{sentenceCase deviceName}} output HAL device implementation.
 */

#include "board_define.h"
#ifdef ENABLE_OUTPUT_DEV_{{pascalCase deviceName}}

#include "FreeRTOS.h"
#include "board.h"

#include "fwk_log.h"
#include "fwk_output_manager.h"
#include "hal_output_dev.h"
#include "hal_event_descriptor_common.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
 
/*******************************************************************************
 * Prototypes
 ******************************************************************************/
 
#if defined(__cplusplus)
extern "C" {
#endif

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Init(const output_dev_t *dev);
static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Deinit(const output_dev_t *dev);
static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Start(const output_dev_t *dev);
static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Stop(const output_dev_t *dev);

__attribute__((weak)) uint32_t APP_OutputDev_{{pascalCase deviceName}}_InferCompleteDecode(output_algo_source_t source,
                                                                             void *inferResult)
{
    return 0;
}

__attribute__((weak)) uint32_t APP_OutputDev_{{pascalCase deviceName}}_InputNotifyDecode(void *inputData)
{
    return 0;
}

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_InferComplete(const output_dev_t *dev,
                                                              output_algo_source_t source,
                                                              void *inferResult);
static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_InputNotify(const output_dev_t *dev, void *data);

#if defined(__cplusplus)
}
#endif

/*******************************************************************************
 * Variables
 ******************************************************************************/

const static output_dev_operator_t s_OutputDev_{{pascalCase deviceName}}Ops = {
    .init   = HAL_OutputDev_{{pascalCase deviceName}}_Init,
    .deinit = HAL_OutputDev_{{pascalCase deviceName}}_Deinit,
    .start  = HAL_OutputDev_{{pascalCase deviceName}}_Start,
    .stop   = HAL_OutputDev_{{pascalCase deviceName}}_Stop,
};

static output_dev_t s_OutputDev_{{pascalCase deviceName}} = {
    .name         = "{{pascalCase deviceName}}",
    .attr.type    = kOutputDevType_Other,
    .attr.reserve = NULL,
    .ops          = &s_OutputDev_{{pascalCase deviceName}}Ops,
};

const static output_dev_event_handler_t s_OutputDev_{{pascalCase deviceName}}Handler = {
    .inferenceComplete = HAL_OutputDev_{{pascalCase deviceName}}_InferComplete,
    .inputNotify       = HAL_OutputDev_{{pascalCase deviceName}}_InputNotify,
};

/*******************************************************************************
 * Code
 ******************************************************************************/

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Init(const output_dev_t *dev)
{
    hal_output_status_t error = kStatus_HAL_OutputSuccess;
    LOGD("++HAL_OutputDev_{{pascalCase deviceName}}_Init");
    BOARD_Init{{pascalCase deviceName}}Resource();
    
    /* Add initialization code here */

    LOGD("--HAL_OutputDev_{{pascalCase deviceName}}_Init");
    return error;
}

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Deinit(const output_dev_t *dev)
{
    hal_output_status_t error = kStatus_HAL_OutputSuccess;
    LOGD("++HAL_OutputDev_{{pascalCase deviceName}}_Deinit");
    
    /* Add de-initialization code here */

    LOGD("--HAL_OutputDev_{{pascalCase deviceName}}_Deinit");
    return error;
}

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Start(const output_dev_t *dev)
{
    hal_output_status_t error = kStatus_HAL_OutputSuccess;
    LOGD("++HAL_OutputDev_{{pascalCase deviceName}}_Start");
    
    /* Add start code here */
    if (FWK_OutputManager_RegisterEventHandler(dev, &s_OutputDev_{{pascalCase deviceName}}Handler) != 0)
    {
        error = kStatus_HAL_OutputError;
    }

    LOGD("--HAL_OutputDev_{{pascalCase deviceName}}_Start");
    return error;
}

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_Stop(const output_dev_t *dev)
{
    hal_output_status_t error = kStatus_HAL_OutputSuccess;
    LOGD("++HAL_OutputDev_{{pascalCase deviceName}}_Stop");
    
    /* Add stop code here */

    LOGD("--HAL_OutputDev_{{pascalCase deviceName}}_Stop");
    return error;
}

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_InferComplete(const output_dev_t *dev,
                                                              output_algo_source_t source,
                                                              void *inferResult)
{
    hal_output_status_t error = kStatus_HAL_OutputSuccess;

    /* Add 'inferenceComplete' event handler code here */
    APP_OutputDev_{{pascalCase deviceName}}_InferCompleteDecode(source, inferResult);

    return error;
}

static hal_output_status_t HAL_OutputDev_{{pascalCase deviceName}}_InputNotify(const output_dev_t *dev, void *data)
{
    hal_output_status_t error = kStatus_HAL_OutputSuccess;
    event_base_t eventBase    = *(event_base_t *)data;

    /* Add 'inputNotify' event handler code here */
    APP_OutputDev_{{pascalCase deviceName}}_InputNotifyDecode(eventBase);

    return error;
}

int HAL_OutputDev_{{pascalCase deviceName}}_Register()
{
    int error = 0;
    LOGD("++HAL_OutputDev_{{pascalCase deviceName}}_Register");
    
    error = FWK_OutputManager_DeviceRegister(&s_OutputDev_{{pascalCase deviceName}});

    LOGD("--HAL_OutputDev_{{pascalCase deviceName}}_Register");
    return error;
}

#endif /* ENABLE_OUTPUT_DEV_{{pascalCase deviceName}} */