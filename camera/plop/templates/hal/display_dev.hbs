/*
 * Copyright 2022 NXP.
 * This software is owned or controlled by NXP and may only be used strictly in accordance with the
 * license terms that accompany it. By expressly accepting such terms or by downloading, installing,
 * activating and/or otherwise using the software, you are agreeing that you have read, and that you
 * agree to comply with and are bound by, such license terms. If you do not agree to be bound by the
 * applicable license terms, then you may not retain, install, activate or otherwise use the software.
 */

/*
 * @brief {{sentenceCase deviceName}} display HAL device implementation.
 */

#include "board_define.h"
#ifdef ENABLE_DISPLAY_DEV_{{pascalCase deviceName}}

#include <FreeRTOS.h>

#include "fwk_log.h"
#include "fwk_display_manager.h"
#include "hal_display_dev.h"
#include "hal_event_descriptor_common.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/

#define DISPLAY_NAME               {{pascalCase deviceName}}
#define DISPLAY_WIDTH              240
#define DISPLAY_HEIGHT             320
#define DISPLAY_BYTES_PER_PIXEL    2
#define DISPLAY_FRAME_BUFFER_COUNT 2

#define DISPLAY_HFP 10
#define DISPLAY_HBP 20
#define DISPLAY_VSW 2
#define DISPLAY_VFP 4
#define DISPLAY_VBP 2

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Init(
    display_dev_t *dev, int width, int height, display_dev_callback_t callback, void *param);
static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Deinit(const display_dev_t *dev);
static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Start(const display_dev_t *dev);
static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Blit(const display_dev_t *dev, void *frame, int width, int height);
static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_InputNotify(const display_dev_t *receiver, void *data);

#if defined(__cplusplus)
}
#endif /* __cplusplus */

/*******************************************************************************
 * Variables
 ******************************************************************************/

const static display_dev_operator_t s_DisplayDev_Ops = {
    .init        = HAL_DisplayDev_{{pascalCase deviceName}}_Init,
    .deinit      = HAL_DisplayDev_{{pascalCase deviceName}}_Deinit,
    .start       = HAL_DisplayDev_{{pascalCase deviceName}}_Start,
    .blit        = HAL_DisplayDev_{{pascalCase deviceName}}_Blit,
    .inputNotify = HAL_DisplayDev_{{pascalCase deviceName}}_InputNotify,
};

static display_dev_t s_DisplayDev_{{pascalCase deviceName}} = {.id   = 0,
                                             .name = DISPLAY_NAME,
                                             .ops  = &s_DisplayDev_{{pascalCase deviceName}}Ops,
                                             .cap  = {.width       = DISPLAY_WIDTH,
                                                     .height      = DISPLAY_HEIGHT,
                                                     .pitch       = DISPLAY_WIDTH * DISPLAY_BYTES_PER_PIXEL,
                                                     .left        = 0,
                                                     .top         = 0,
                                                     .right       = DISPLAY_WIDTH - 1,
                                                     .bottom      = DISPLAY_HEIGHT - 1,
                                                     .rotate      = kCWRotateDegree_0,
                                                     .format      = kPixelFormat_RGB565,        // TODO
                                                     .srcFormat   = kPixelFormat_UYVY1P422_RGB, // TODO
                                                     .frameBuffer = NULL,
                                                     .callback    = NULL,
                                                     .param       = NULL}};

AT_NONCACHEABLE_SECTION_ALIGN(
    static uint8_t s_FrameBuffers[DISPLAY_FRAME_BUFFER_COUNT][DISPLAY_HEIGHT][DISPLAY_WIDTH * DISPLAY_BYTES_PER_PIXEL],
    32);
static uint8_t *s_pCurrentFrameBuffer = NULL;
static bool s_NewBufferSet            = 0;

static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Init(
    display_dev_t *dev, int width, int height, display_dev_callback_t callback, void *param)
{
    hal_display_status_t ret = kStatus_HAL_DisplaySuccess;
    LOGD("++HAL_DisplayDev_{{pascalCase deviceName}}_Init");
    BOARD_Init{{pascalCase deviceName}}Resource(void);

    dev->cap.width       = width;
    dev->cap.height      = height;
    dev->cap.frameBuffer = (void *)&s_FrameBuffers[1];
    dev->cap.callback    = callback;

    /* Add init code here */

    LOGD("--HAL_DisplayDev_{{pascalCase deviceName}}_Init");
    return ret;
}

static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Deinit(const display_dev_t *dev)
{
    hal_display_status_t ret = kStatus_HAL_DisplaySuccess;
    LOGD("++HAL_DisplayDev_{{pascalCase deviceName}}_Deinit");
    
    /* Add de-initialization code here */

    LOGD("--HAL_DisplayDev_{{pascalCase deviceName}}_Deinit");
    return ret;
}

static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Start(const display_dev_t *dev)
{
    hal_display_status_t ret = kStatus_HAL_DisplaySuccess;
    LOGD("++HAL_DisplayDev_{{pascalCase deviceName}}_Start");
    
    /* Add start code here */

    LOGD("--HAL_DisplayDev_{{pascalCase deviceName}}_Start");
    return ret;
}

static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_Blit(const display_dev_t *dev, void *frame, int width, int height)
{
    hal_display_status_t ret = kStatus_HAL_DisplayNonBlocking;
    LOGD("++HAL_DisplayDev_{{pascalCase deviceName}}_Blit");
    
    /* Add blit code here */

    LOGD("--HAL_DisplayDev_{{pascalCase deviceName}}_Blit");
    return ret;
}

static hal_display_status_t HAL_DisplayDev_{{pascalCase deviceName}}_InputNotify(const display_dev_t *receiver, void *data)
{
    hal_display_status_t error = kStatus_HAL_DisplaySuccess;
    event_base_t eventBase     = *(event_base_t *)data;

    switch (eventBase.eventId)
    {
        /* Add event handler code here */
        default:
            break;
    }

    return error;
}

int HAL_DisplayDev_{{pascalCase deviceName}}_Register()
{
    int ret = 0;
    LOGD("++HAL_DisplayDev_{{pascalCase deviceName}}_Register");

    ret = FWK_DisplayManager_DeviceRegister(&s_DisplayDev_{{pascalCase deviceName}});

    LOGD("--HAL_DisplayDev_{{pascalCase deviceName}}_Register");
    return ret;
}

#endif /* ENABLE_DISPLAY_DEV_{{pascalCase deviceName}} */