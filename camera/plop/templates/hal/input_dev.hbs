/*
 * Copyright 2022 NXP.
 * This software is owned or controlled by NXP and may only be used strictly in accordance with the
 * license terms that accompany it. By expressly accepting such terms or by downloading, installing,
 * activating and/or otherwise using the software, you are agreeing that you have read, and that you
 * agree to comply with and are bound by, such license terms. If you do not agree to be bound by the
 * applicable license terms, then you may not retain, install, activate or otherwise use the software.
 */

/*
 * @brief {{sentenceCase deviceName}} HAL input device implementation. 
 */

#include "board_define.h"
#ifdef ENABLE_INPUT_DEV_{{pascalCase deviceName}}

#include <FreeRTOS.h>
#include "board.h"

#include "fwk_log.h"
#include "fwk_input_manager.h"
#include "hal_input_dev.h"
#include "hal_event_descriptor_common.h"

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Init(input_dev_t *dev, input_dev_callback_t callback);
static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Deinit(const input_dev_t *dev);
static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Start(const input_dev_t *dev);
static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Stop(const input_dev_t *dev);

__attribute__((weak)) uint32_t APP_InputDev_{{pascalCase deviceName}}_InputNotify(void *inputData);

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_InputNotify(const input_dev_t *dev, void *param);

/*******************************************************************************
 * Variables
 ******************************************************************************/

const static input_dev_operator_t s_InputDev_{{pascalCase deviceName}}Ops = {
    .init        = HAL_InputDev_{{pascalCase deviceName}}_Init,
    .deinit      = HAL_InputDev_{{pascalCase deviceName}}_Deinit,
    .start       = HAL_InputDev_{{pascalCase deviceName}}_Start,
    .stop        = HAL_InputDev_{{pascalCase deviceName}}_Stop,
    .inputNotify = HAL_InputDev_{{pascalCase deviceName}}_InputNotify,
};

static input_dev_t s_InputDev_{{pascalCase deviceName}} = {
    .id = 1, .name = "{{pascalCase deviceName}}", .ops = &s_InputDev_{{pascalCase deviceName}}Ops, .cap = {.callback = NULL}};

static input_event_t s_InputEvent;

/*******************************************************************************
 * Code
 ******************************************************************************/

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Init(input_dev_t *dev, input_dev_callback_t callback)
{
    hal_input_status_t error = kStatus_HAL_InputSuccess;
    LOGD("++HAL_InputDev_{{pascalCase deviceName}}_Init");
    BOARD_Init{{pascalCase deviceName}}Resource();

    /* Add initialization code here */

    LOGD("--HAL_InputDev_{{pascalCase deviceName}}_Init");
    return error;
}

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Deinit(const input_dev_t *dev)
{
    hal_input_status_t error = kStatus_HAL_InputSuccess;
    LOGD("++HAL_InputDev_{{pascalCase deviceName}}_Deinit");

    /* Add de-initialization code here */

    LOGD("--HAL_InputDev_{{pascalCase deviceName}}_Deinit");
    return error;
}

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Start(const input_dev_t *dev)
{
    hal_input_status_t error = kStatus_HAL_InputSuccess;
    LOGD("++HAL_InputDev_{{pascalCase deviceName}}_Start");

    /* Add start code here */

    LOGD("--HAL_InputDev_{{pascalCase deviceName}}_Start");
    return error;
}

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_Stop(const input_dev_t *dev)
{
    hal_input_status_t error = kStatus_HAL_InputSuccess;
    LOGD("++HAL_InputDev_{{pascalCase deviceName}}_Stop");

    /* Add stop code here */

    LOGD("--HAL_InputDev_{{pascalCase deviceName}}_Stop");
    return error;
}

static hal_input_status_t HAL_InputDev_{{pascalCase deviceName}}_InputNotify(const input_dev_t *dev, void *param)
{
    hal_input_status_t error = kStatus_HAL_InputSuccess;
    event_base_t eventBase   = *(event_base_t *)data;

    /* TODO: Modify this in a way that's relevant to the device */
    APP_InputDev_{{pascalCase deviceName}}_InputNotifyDecode(inputData);

    return error;
}

int HAL_InputDev_{{pascalCase deviceName}}_Register()
{
    int error = 0;
    LOGD("++HAL_InputDev_{{pascalCase deviceName}}_Register");

    error = FWK_InputManager_DeviceRegister(&s_InputDev_{{pascalCase deviceName}});

    LOGD("--HAL_InputDev_{{pascalCase deviceName}}_Register");
    return error;
}

#endif /* ENABLE_INPUT_DEV_{{pascalCase deviceName}} */