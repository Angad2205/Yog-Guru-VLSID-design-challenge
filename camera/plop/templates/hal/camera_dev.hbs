/*
 * Copyright 2022 NXP.
 * This software is owned or controlled by NXP and may only be used strictly in accordance with the
 * license terms that accompany it. By expressly accepting such terms or by downloading, installing,
 * activating and/or otherwise using the software, you are agreeing that you have read, and that you
 * agree to comply with and are bound by, such license terms. If you do not agree to be bound by the
 * applicable license terms, then you may not retain, install, activate or otherwise use the software.
 */

/*
 * @brief {{sentenceCase deviceName}} camera HAL device implementation.
 */

#include "board_define.h"
#ifdef ENABLE_CAMERA_DEV_{{pascalCase deviceName}}

#include <FreeRTOS.h>
#include <stdlib.h>
#include <task.h>

#include "board.h"
#include "fsl_camera.h"
#include "fsl_camera_device.h"
#include "fsl_camera_receiver.h"

#include "fwk_camera_manager.h"
#include "fwk_log.h"
#include "hal_event_descriptor_common.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/

#define CAMERA_NAME             "{{pascalCase deviceName}}"
#define CAMERA_DEV_WIDTH        640 // TODO
#define CAMERA_DEV_HEIGHT       480 // TODO
#define CAMERA_BYTES_PER_PIXEL  2   // TODO
#define CAMERA_DEV_BUFFER_COUNT 4   // TODO
#define CAMERA_DEV_BUFFER_ALIGN 64  // TODO

#define CAMERA_DEV_CONTROL_FLAGS (kCAMERA_VsyncActiveHigh | kCAMERA_HrefActiveHigh | kCAMERA_DataLatchOnRisingEdge) // TODO?

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */
/* Add function prototypes here */

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Init(camera_dev_t *dev);
static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Deinit(camera_dev_t *dev);
static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Start(const camera_dev_t *dev);
static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Enqueue(const camera_dev_t *dev, void *data);
static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Dequeue(const camera_dev_t *dev, void **data, pixel_format_t *format);
static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_PostProcess(const camera_dev_t *dev, void **data, pixel_format_t *format);
static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_InputNotify(const camera_dev_t *dev, void *data);

#if defined(__cplusplus)
}
#endif /* __cplusplus */

/*******************************************************************************
 * Variables
 ******************************************************************************/

/* Use noncache if DMA is involved */
// AT_NONCACHEABLE_SECTION_ALIGN(
/* Use cacheable otherwise */
SDK_ALIGN(
    static uint8_t s_FrameBuffer[CAMERA_DEV_BUFFER_COUNT][CAMERA_DEV_HEIGHT][CAMERA_DEV_WIDTH * CAMERA_BYTES_PER_PIXEL],
    CAMERA_DEV_BUFFER_ALIGN);

static uint32_t *s_pCurrentFrameBuffer = NULL;
static bool s_PostProcessed            = false;

const static camera_dev_operator_t s_CameraDev_{{pascalCase deviceName}}Ops = {
    .init        = HAL_CameraDev_{{pascalCase deviceName}}_Init,
    .deinit      = HAL_CameraDev_{{pascalCase deviceName}}_Deinit,
    .start       = HAL_CameraDev_{{pascalCase deviceName}}_Start,
    .enqueue     = HAL_CameraDev_{{pascalCase deviceName}}_Enqueue,
    .dequeue     = HAL_CameraDev_{{pascalCase deviceName}}_Dequeue,
    .postProcess = HAL_CameraDev_{{pascalCase deviceName}}_PostProcess,
    .inputNotify = HAL_CameraDev_{{pascalCase deviceName}}_InputNotify,
};

static camera_dev_t s_CameraDev_{{pascalCase deviceName}} = {
    .id   = 0,
    .name = CAMERA_NAME,
    .ops  = &s_CameraDev_{{pascalCase deviceName}}Ops,
    .config =
        {
            .height   = CAMERA_DEV_HEIGHT,
            .width    = CAMERA_DEV_WIDTH,
            .pitch    = CAMERA_DEV_WIDTH * CAMERA_BYTES_PER_PIXEL,
            .left     = 0,
            .top      = 0,
            .right    = CAMERA_DEV_WIDTH - 1,
            .bottom   = CAMERA_DEV_HEIGHT - 1,
            .rotate   = kCWRotateDegree_0,
            .flip     = kFlipMode_None,
            .swapByte = 0,
        },
    .cap =
        {

            .callback = NULL,
            .param    = NULL,
        },
};

/*******************************************************************************
 * Code
 ******************************************************************************/

static void _FrameReceiveCallback(camera_receiver_handle_t *handle, status_t status, void *userData)
{
    camera_dev_t *dev = (camera_dev_t *)userData;

    if (dev->cap.callback != NULL)
    {
        uint8_t fromISR = __get_IPSR();
        dev->cap.callback(dev, kCameraEvent_SendFrame, dev->cap.param, fromISR);
    }
}

static hal_camera_status_t _HAL_CameraDev_{{pascalCase deviceName}}_Init(camera_dev_t *dev)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    camera_config_t cameraConfig;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Init");

    memset(&cameraConfig, 0, sizeof(cameraConfig));
    cameraConfig.pixelFormat                = kVIDEO_PixelFormatRGB565;
    cameraConfig.bytesPerPixel              = CAMERA_BYTES_PER_PIXEL;
    cameraConfig.resolution                 = FSL_VIDEO_RESOLUTION(dev->config.width, dev->config.height);
    cameraConfig.frameBufferLinePitch_Bytes = dev->config.width * CAMERA_BYTES_PER_PIXEL;
    cameraConfig.interface                  = kCAMERA_InterfaceGatedClock;
    cameraConfig.controlFlags               = CAMERA_DEV_CONTROL_FLAGS;
    cameraConfig.framePerSec                = 30;

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_Init");
    return ret;
}

static void _HAL_CameraDev_{{pascalCase deviceName}}_AsyncInitTask(void *pvParameters)
{
    camera_dev_t *dev       = (camera_dev_t *)pvParameters;
    hal_camera_status_t ret = _HAL_CameraDev_{{pascalCase deviceName}}_Init(dev);

    if (dev->cap.callback != NULL)
    {
        uint8_t fromISR = __get_IPSR();
        dev->cap.callback(dev, kCameraEvent_CameraDeviceInit, &ret, fromISR);
    }
    vTaskDelete(NULL);
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Init(
    camera_dev_t *dev, int width, int height, camera_dev_callback_t callback, void *param)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Init");
    BOARD_Init{{pascalCase deviceName}}Resource();

    dev->config.width  = width;
    dev->config.height = height;
    dev->cap.callback  = callback;
    dev->cap.param     = param;

#if FWK_SUPPORT_ASYNC_CAMERA_INIT
    UBaseType_t priority = uxTaskPriorityGet(NULL);

    if (xTaskCreate(_HAL_CameraDev_{{pascalCase deviceName}}_AsyncInitTask, "Init{{pascalCase deviceName}}Task", 512, dev, priority, NULL) != pdPASS)
    {
        ret = kStatus_HAL_CameraError;
    }
    else
    {
        ret = kStatus_HAL_CameraNonBlocking;
    }
#else
    ret = _HAL_CameraDev_{{pascalCase deviceName}}_Init(dev);
#endif /* FWK_SUPPORT_ASYNC_CAMERA_INIT */

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_Init");
    return ret;
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Deinit(camera_dev_t *dev)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Deinit");

    /* Add de-initialization code here */

    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Deinit");
    return ret;
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Start(const camera_dev_t *dev)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Start");

    /* Add start code here */

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_Start");
    return ret;
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Enqueue(const camera_dev_t *dev, void *data)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Enqueue");

    if (s_pCurrentFrameBuffer != NULL)
    {
        LOGD("Submitting empty buffer");
        CAMERA_RECEIVER_SubmitEmptyBuffer(&s_CameraReceiver, (uint32_t)s_pCurrentFrameBuffer);
        s_pCurrentFrameBuffer = NULL;
    } 
    else
    {
        return kStatus_HAL_CameraError;
    }

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_Enqueue");
    return ret;
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_Dequeue(const camera_dev_t *dev,
                                                                           void **data,
                                                                           pixel_format_t *format)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Dequeue");

    while (kStatus_Success != CAMERA_RECEIVER_GetFullBuffer(&s_CameraReceiver, &s_pCurrentFrameBuffer))
    {
    }

    *data = (void *)s_pCurrentFrameBuffer;

    /* Reset post process flag for this frame */
    s_PostProcessed = false;

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_Dequeue");
    return ret;
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_PostProcess(const camera_dev_t *dev, void **data, pixel_format_t *format)
{
    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_PostProcess");

    /* Only do the post process once for one frame */
    if (s_PostProcessed == false)
    {
        /* Add post-processing code here */

        /* Mark this frame as having been post-process to skip duplicate processing of the same frame */
        s_PostProcessed = true;
    }

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_PostProcess");
    return ret;
}

static hal_camera_status_t HAL_CameraDev_{{pascalCase deviceName}}_InputNotify(const camera_dev_t *dev, void *data)
{
    hal_camera_status_t error = kStatus_HAL_CameraSuccess;
    event_base_t eventBase    = *(event_base_t *)data;

    switch (eventBase.eventId)
    {
        /* Add event handler code here */
        default:
            break;
    }

    return error;
}

int HAL_CameraDev_{{pascalCase deviceName}}_Register()
{
    int error = 0;
    LOGD("++HAL_CameraDev_{{pascalCase deviceName}}_Register");

    error = FWK_CameraManager_DeviceRegister(&s_CameraDev_{{pascalCase deviceName}});

    LOGD("--HAL_CameraDev_{{pascalCase deviceName}}_Register");
    return error;
}

#endif /* ENABLE_CAMERA_DEV_{{pascalCase deviceName}} */